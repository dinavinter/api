openapi: 3.1.0
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: https://github.com/Rebilly/generator-openapi-repo
info:
  license:
    name: accounts
    url: sap.cdc.accounts
  title: Authorization API
  description: |
     This API would accept a request with a grant_type and authorization_details. Depending on the values given, the API would then use JSON Schema to validate the authorization_details and the grant_type to determine the user's authorization level.



  version: "1.0"
tags:
  - name: authorization:api
    x-displayName: Authorization API
    description:  |
      This API would accept a request with a grant_type and authorization_details. Depending on the values given, the API would then use JSON Schema to validate the authorization_details and the grant_type to determine the user's authorization level.

  - name: registration:guest
    x-displayName: Guest
    description:  |

      The guest authorization is used in conjunction with accounts APIs to provide a seamless and frictionless experience for end users who want to subscribe to newsletters or give consents without having to go through the process of registering for an account.

      The guest authorization API is similar to registration or login APIs, in that it creates an account for the user or returns an existing account token if one exists.
      However, the key difference is that the token generated by the guest authorization API has fewer permissions than a regular logged-in user account; the allowd fields defined by guest authorization schema.

      This allows businesses to provide their guests with limited access to their services, without giving them full access to all of the APIs and data that a regular user would have.

      <SchemaDefinition schemaRef="#/components/schemas/GuestAuthorizationRequest" />


  - name: registration:password
    x-displayName: Password
    description:  |

      The API validates whether an account can be registered depending on the identifier and data input.
      If the identifier does not exist, the API will create an account and return a token representing the new account with permissions to continue with the registration flow.
      If the identifier is already linked to an account with credentials, the API will return a conflict response with a token representing the conflicting account, permission to trigger the link account flow.

      Furthermore, if the identifier exists but is only "weakly" associated with a guest account, the API will also return a token which represents the existing account and grant the necessary permissions to continue with the registration flow.

      <SchemaDefinition schemaRef="#/components/schemas/SignupPasswordAuthorizationRequest" />

  - name: grant:confirmation
    x-displayName: Evaluate Access
    description:  |

      The authorization can be dependent on the request state, while a  guest user is granted immediate access to update only specific data; in a way that certain fields access can be defined as dependent on the confirmation state.
      When the user request to authorize these fields, the request is transitioned to a state of "pending_confirmation".
      when the user confirms their email or phone number, they can transition to the "email_confirmed" or "phone_confirmed" state respectively , which grants access to read and update more data.

x-tagGroups:

  - name: Authorization API
    expended: true
    tags:
      - authorization:api

  - name: Authorization Type
    tags:
      - registration:guest
      - registration:password
      - grant:confirmation
      - email:confirmation
      - phonenumber:confirmation

  - name: Resource API
    tags:
      - Resource API

  - name: Settings
    tags:
      - Identifier Grant Settings
      - Permissions Settings
  - name: Authorization Grants
    tags:
      - grant

servers:
  - url: https://accounts.{env}
    variables:
      env:
        default: gigya.com
        enum:
          - gigya.com
          - eu1.gigya.com
          - au1.gigya.com
          - us1-st1.gigya.com
          - eu1-st1.gigya.com
          - au1-s1.gigya.com
          - cn1.sapcdm.cn
          - cn1-st1.sapcdm.cn
        description: gigya domain
components:
  schemas:
    PasswordSignup:
      properties:
        password:
          type: string
          example: DFDGaaa@$
    PasswordId:
      properties:
        id:
          type: string
          description: represent a key of the password to be connected to the user
          format: uuid
    Claims:
      allOf:
        - $ref: "#/components/schemas/AccountField"
        - additionalProperties:
            anyOf:
              - $ref: "#/components/schemas/field"
              - type:
                  - string
          patternProperties:
            profile.:
              $ref: "#/components/schemas/AccountField"


    EmailIdentifier:
      title: Email Identifier
      properties:
          email:
            format: email
            type: string
      required:
        - email

    ProfileEmailIdentifier:
      title: Profile Email Identifier
      properties:
        profile:
          $ref: "#/components/schemas/EmailIdentifier"
      required:
        -  profile

    PhoneIdentifier:
      title: Phone Identifier
      properties:
        phonenumber:
          type: string
          format: phonenumber
          example: (212)456-7890
      required:
        - phonenumber

    Identifier:
      oneOf:
        - $ref: "#/components/schemas/PhoneIdentifier"
        -  $ref: "#/components/schemas/EmailIdentifier"

    AuthorizationRequest:
      oneOf:
        - title: 'Guest Registration'
          $ref: "#/components/schemas/GuestAuthorizationRequest"
        - title: 'Password Registration'
          $ref: "#/components/schemas/SignupPasswordAuthorizationRequest"
        - title: 'Social Registration'
          $ref: "#/components/schemas/SocialAuthorizationRequest"

        - title: 'Group Authorization Request'
          $ref: "#/components/schemas/GroupAuthorizationRequest"



    GroupAuthorizationRequest:
      x-audience: Next
      allOf:
        - properties:
            authorization_details:
              type: array
              minItems: 1
              items:
                allOf:
                  - $ref: "#/components/schemas/AuthorizationDetailsGroupMember"
                  - $ref: "#/components/schemas/AccountAuthorizationDetails"
          required:
            - authorization_details
        - oneOf:
            - $ref: "#/components/schemas/BrowserLoginGrant"
            - $ref: "#/components/schemas/MobileLoginGrant"
            - $ref: "#/components/schemas/IdTokenGrant"

    SocialAuthorizationRequest:
       title: "Social Registration"
       allOf:
          - properties:
              authorization_details:
                type: array
                minItems: 1
                items:
                  $ref: "#/components/schemas/AuthorizationDetailsSocial"
            required:
              - authorization_details
          - $ref: "#/components/schemas/ProviderTokenGrant"



    BrowserLoginGrant:
      x-tags:
        - grant
      title: browser session (login_token)
      properties:
        grant_type:
          enum:
            - urn:gigya.com:authentication:login:browser
        login_token:
          type: string

    MobileLoginGrant:
      x-tags:
        - grant
      title: mobile session (oauth_token)
      properties:
        grant_type:
          const: urn:gigya.com:authentication:login:mobile
          default: urn:gigya.com:authentication:login:mobile
        oauth_token:
          type: string

    EmailGrant:
      x-tags:
        - grant
      title: Email Identifier
      allOf:
        - properties:
            grant_type:
              enum:
                - urn:gigya.com:identifier:email
          required:
            - grant_type

        - $ref: "#/components/schemas/EmailIdentifier"

    IdentifierGrant:
      x-tags:
        - grant
      oneOf:
        - title: Account Identifier Grant
          $ref: "#/components/schemas/AccountIdentifierGrant"


        - title: Query Identifier Grant.
          $ref: "#/components/schemas/QueryIdentifierGrant"

    AccounAuthorizationDetailstWithIdentifier:
      title: "Account Identifier Authorization Details"
      allOf:
        - oneOf:
          - title: 'Email Identifier'
            properties:
              authorization_details:
                items:
                  properties:
                      account:
                        $ref: "#/components/schemas/ProfileEmailIdentifier"

          - title: 'Phone Identifier'
            properties:
              authorization_details:
                items:
                    properties:
                      account:
                        $ref: "#/components/schemas/PhoneIdentifier"

    AccountIdentifierGrant:
      description: identify with any identifier described in account schema.
      title: "Account Identifier Grant"
      required:
        - grant_type

      allOf:
        - properties:
            grant_type:
              writeOnly: true
              enum:
                - urn:gigya.com:identifier

            authorization_details:
              items:
                allOf:
                  - required:
                    -  account

          required:
            - grant_type
            - authorization_details

        - $ref: "#/components/schemas/AccounAuthorizationDetailstWithIdentifier"



    PhonenumberGrant:
      title: Phone Identifier
      properties:
        grant_type:
          const: urn:gigya.com:identifier:phonenumber
        phonenumber:
          type: string
          format: phonenumber
          example: (212)456-7890
      required:
        - phonenumber

    IdTokenGrant:
      title: Id Token
      properties:
        grant_type:
          const: urn:gigya.com:id_token
        assertion:
          type: string
          description: A JWT that represents an end user.
          example:
            - lookup_token
            - id_token

    ProviderTokenGrant:
      title: Provide Token
      properties:
        grant_type:
          writeOnly: true
          const: urn:gigya.com:provider_token
        token:
          type: string
          description: A JWT that contains provider data.
        provider:
          type: string
          example: facebook

    GuestTokenResponse:
      allOf:
      - $ref: "#/components/schemas/GuestAuthorizationRequest"
      - properties:
          access_token:
            $ref: "#/components/schemas/JwtToken"
            description: The access token issued by the authorization endpoint.
          token_type:
            type: string
            description: A case-insensitive value specifying the method of using the access token issued
            enum:
              - Bearer
          expires_in:
            type: integer
            description: The lifetime of the access token (in seconds).

    AuthorizationResponse:
      allOf:
        - $ref: "#/components/schemas/AuthorizationRequest"
        - properties:
            access_token:
              type: string
              $ref: "#/components/schemas/JwtToken"
              description: The access token issued by the authorization endpoint.
            token_type:
              type: string
              description: A case-insensitive value specifying the method of using the access token issued
              enum:
                - Bearer
            expires_in:
              type: integer
              description: The lifetime of the access token (in seconds).



    GuestAuthorizationRequest:
      x-tags:
        -  registration:guest
      summary: 'Authorization request for guest signup'
      allOf:
        - properties:
            authorization_details:
              type: array
              minItems: 1
              items:
                allOf:
                  - $ref:  "#/components/schemas/AuthorizationDetailsSignupGuest"
          required:
           - authorization_details
           - grant_type

        - $ref: "#/components/schemas/IdentifierGrant"

        - $ref: "#/components/schemas/RichAuthorizationRequest"



    QueryIdentifierGrant:
      title: Query Identifier Grant.
      x-audience: Next
      oneOf:
        - $ref: "#/components/schemas/EmailGrant"
        - $ref: "#/components/schemas/PhonenumberGrant"




    RichAuthorizationRequest:
      properties:
        authorization_details:
          type: array
          minItems: 1
          items:
            allOf:
              - $ref: "#/components/schemas/ClaimsAuthorizationDetails"
              - $ref: "#/components/schemas/FieldsAuthorizationnDetails"


    SignupPasswordAuthorizationRequest:
      title: "Password Registration"
      summary: 'Authorization request for guest signup'
      x-tags:
        - registration:guest
      allOf:
        - properties:
            authorization_details:
              type: array
              minItems: 1
              items:
                allOf:
                  - $ref:  "#/components/schemas/AuthorizationDetailsSignupPassword"
          required:
           - authorization_details

        - $ref: "#/components/schemas/IdentifierGrant"

        - $ref: "#/components/schemas/RichAuthorizationRequest"



    AuthorizationDetails:
      allOf:
        - properties:
            type:
              description: |
                The type of authorization data as a string. This field defines which other elements are allowed in the request ->
                [RFC](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-rar-08#section-2.1).
              type: string
        - oneOf:
          - title: Authorization for specific fields; as a schema.
            properties:
                fields:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/field"

          - title: Authorization for specific values; as a json.
            properties:
              account:
                 type: object
                 $ref: "#/components/schemas/Account"

    FieldsAuthorizationnDetails:
      title: Authorization for specific fields.
      summary: Authorization for specific fields; as a schema
      properties:
        fields:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/field"

    ClaimsAuthorizationDetails:
      title: Authorization for specific values.
      properties:
        account:
          $ref: "#/components/schemas/Account"


    AccountAuthorizationDetails:
      description: 'Authorization requirements for account APIs'
      allOf:
        - properties:
            type:
              description: |
                The type of authorization data as a string. This field defines which other elements are allowed in the request ->
                [RFC](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-rar-08#section-2.1).
              type: string
        - anyOf:
            - title: Authorization for specific values.
              required: ["account"]
              properties:
                account:
                  type: object
                  $ref: "#/components/schemas/Account"
            - title: Authorization for specific fields.
              required: ["fields"]
              summary: Authorization for specific fields; as a schema
              properties:
                fields:
                  type: object
                  additionalProperties:
                    $ref: "#/components/schemas/field"


    AuthorizationDetailsGroupMember:
      allOf:
        - properties:
            type:
              const: on-behalf-of:group:member
            locations:
              type: array
              items:
                type: string
                enum:
                  - /groups/members
            group:
              type: string
              example: group1

    AuthorizationDetailsSignupGuest:
      description: 'Authorization details for a sighup as a guest'
      summary: 'Authorization details for a sighup as a guest'
      allOf:
        - properties:
            type:
              const: self-service:registration:guest
            locations:
              type: array
              items:
                type: string
                enum:
                  - accounts.setAccountInfo



    AuthorizationDetailsSignupPassword:
      allOf:
        - properties:
            type:
              const: self-service:registration:password
            locations:
              type: array
              items:
                type: string
                enum:
                  - accounts.register
                  - accounts.finalizeRegistration


    AuthorizationDetailsSocial:
      allOf:
        - properties:
            type:
              const: self-service:registration:social
            locations:
              type: array
              items:
                enum:
                    - /accounts.addConnection
            provider_session:
              readOnly: true
              type: string
              default: "sadsaiwjwae0w"
              description: provider token to use in add connection



    IdentifierPermissionsSettings:
      properties:
        fields:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/field"
    Uid:
      type: string
      format: uuid
      example: 753487e7-10bc-4e69-b3b2-4da33721ea3e

    JwtToken:
      type: array
      contentEncoding: base64
      contentMediaType: application/jwt
      minItems: 2
      prefixItems:
        - const:
            typ: at+jwt
            alg: ES256
        - $ref: "#/components/schemas/TokenDetails"

    TokenDetails:
      required:
        - iss
        - exp
      allOf:
        - properties:
            iss:
              const: https://auth.${env.server}/guest/identifier
              type: string
              format: uri
            sub:
              $ref: "#/components/schemas/Uid"
              description: newly generated id or existing id of a user
            sub_type:
              type: string
              enum:
                - uid
            zoneinfo:
              description: either existing user zone or the zone from request if user not exists
              enum:
                - eu1
                - us1
                - au1
        - $ref: "#/components/schemas/AuthorizationRequest"




    AccountField:
      type: object
      patternProperties:
        profile.:
          _perms: x

    AccountFieldRef:
      type: object
      anyOf:
        - title: profile.photoURL
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/photoURL
        - title: profile.religion
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/religion
        - title: profile.likes.timestamp
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/likes.timestamp
        - title: profile.birthYear
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/birthYear
        - title: profile.industry
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/industry
        - title: profile.firstName
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/firstName
        - title: profile.city
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/city
        - title: profile.phones.number
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/phones.number
        - title: profile.gender
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/gender
        - title: profile.hometown
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/hometown
        - title: profile.birthDay
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/birthDay
        - title: profile.interests
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/interests
        - title: profile.lastName
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/lastName
        - title: profile.locale
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/locale
        - title: profile.name
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/name
        - title: profile.education.endYear
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/education.endYear
        - title: profile.age
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/age
        - title: profile.bio
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/bio
        - title: profile.state
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/state
        - title: profile.skills.skill
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/skills.skill

        - title: profile.timezone
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/profile/#/timezone
        - title: data.interestedIn
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/data/#/properties/interestedIn
        - title: data.children
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/data/#/properties/children
        - title: preferences.terms.newsletter
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/preferences/#/properties/terms.newsletter
        - title: preferences.terms.marketing
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/preferences/#/properties/terms.marketing
        - title: subscriptions.news
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/subscriptions/#/properties/other.marketing
        - title: communication.sms_news
          properties:
            $ref:
              const: https://schema.gigya.com/schemas/communication/#/properties/sms_news
    basic_response:
      x-tags:
        - basic_response
      type: object
      required:
        - callId
        - errorCode
        - time
      properties:
        errorCode:
          type: integer
          readOnly: true
        callId:
          type: string
          readOnly: true
          $comment: automaticly added by gator
        time:
          type: string
          format: date-time
          $comment: automaticly added by gator
        statusCode:
          type: integer
          minimum: 200
          maximum: 599
          $comment: automaticly added by gator (calculated by error code)
        apiVersion:
          type: integer
          const: 2
          $comment: automaticly added by gator (calculated by error code)
      additionalProperties: true
    error_response:
      x-tags:
        - error_response
      type: object
      required:
        - errorCode
        - errorMessage
        - errorDetails
      allOf:
        - $ref: "#/components/schemas/basic_response"
      properties:
        errorMessage:
          type: string
        errorCode:
          type: integer
          minimum: 400000
          maximum: 599999
        errorDetails:
          type: string
        statusCode:
          type: integer
          minimum: 400
          maximum: 599
    field:
      allOf:
        - properties:
            $ref:
              type: string
              format: uri-reference
              description: reference the original defention from account schema, cosnent defentitions, etc.
        - $ref: "#/components/schemas/AccountFieldRef"

    fields.phone_number:
      type: object
      allOf:
        - $ref: "#/components/schemas/field"
        - properties:
            $ref:
              type: string
              format: uri-reference
              const: https://{{$server}}.gigya.com/schemas/profile/#properties/phonenumber.
    identifier-endpoint:
      enum:
        - get
        - get-or-create
    identity.mobile:
      type: object
      title: mobile identity
      properties:
        properties:
          readOnly: true
          type: object
          properties:
            phonenumber:
              allOf:
                - $ref: "#/components/schemas/fields.phone_number"
                - properties:
                    writeOnly:
                      const: true
                      default: true
                      type: boolean
        lookup:
          $ref: "#/components/schemas/identifier-endpoint"
        lookup/schema:
          type: string
          const: gigya.com/identifiers/phonenumber
        lookup/identifier:
          readOnly: true
          type: string
          format: json-path
          const: ${ .input.phonenumber }
    fields.email:
      type: object
      allOf:
        - $ref: "#/components/schemas/field"
        - properties:
            $ref:
              type: string
              format: uri-reference
              const: https://$server.gigya.com/schemas/profile/#properties/email.
    identity.email:
      type: object
      title: email identity
      properties:
        properties:
          readOnly: true
          type: object
          properties:
            email:
              allOf:
                - $ref: "#/components/schemas/fields.email"
                - properties:
                    writeOnly:
                      const: true
                      default: true
                      type: boolean
        lookup:
          $ref: "#/components/schemas/identifier-endpoint"
        lookup/schema:
          type: string
          const: gigya.com/identifiers/email
        lookup/identifier:
          readOnly: true
          type: string
          format: json-path
          const: ${ .input.email }
    identity.settings:
      type: object
      anyOf:
        - $ref: "#/components/schemas/identity.mobile"
        - $ref: "#/components/schemas/identity.email"
    Account:
      type: object
      properties:
        profile:
          $ref: components\account-schema\schemas\profile.json
        data:
          $ref: components\account-schema\schemas\data.json
        subscriptions:
          $ref: components\account-schema\schemas\subscriptions.json
        preferences:
          $ref: components\account-schema\schemas\preferences.json


  responses:
    IdentifierSignup:
      description: Identifier Signup Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Identifier"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/Identifier"

    PasswordSignup:
      description: Identifier Signup Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PasswordId"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/PasswordId"

    AuthorizationResponse:
      description: Guest token created.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/AuthorizationResponse"
              - $ref: "#/components/schemas/basic_response"
    GuestAuthorizationResponse:
      description: Guest token created.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/GuestTokenResponse"
              - $ref: "#/components/schemas/basic_response"
    IdentifierSettings:
      description: Identifier grant settings
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/identity.settings"
    IdentifierPermissionsSettings:
      description: Identifier grant permissions settings
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/IdentifierPermissionsSettings"
    bad_request:
      description: Invalid parameter value.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/error_response"
              - properties:
                  errorMessage:
                    const: Invalid parameter value.
                  errorCode:
                    const: 400006
                  statusCode:
                    const: 400
    forbidden:
      description: Forbidden.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/error_response"
              - type: object
                properties:
                  errorMessage:
                    const: You do not have permission to invoke the method.
                  errorCode:
                    const: 403000
                  statusCode:
                    const: 403
    user_not_found:
      description: Caused by an invalid UID, or a UID not applicable to the current API key.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/error_response"
              - type: object
                properties:
                  errorMessage:
                    const: UID not found
                  errorCode:
                    const: 404003
                  statusCode:
                    const: 404
    requires_authentication:
      description: Requires authentication; this API requires a logged-in User.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/error_response"
              - properties:
                  errorMessage:
                    const: Unauthorized user.
                  errorCode:
                    const: 403005
                  statusCode:
                    const: 403


  requestBodies:
    SetAccountInfo:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Account"
    AuthorizationRequest:
      description: An authorization request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthorizationRequest"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/AuthorizationRequest"
        application/oauth-authz-req+jwt:
          schema:
            $ref: "#/components/schemas/AuthorizationRequest"

    GuestAuthorizationRequest:
      description: An authorization request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GuestAuthorizationRequest"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/GuestAuthorizationRequest"
        application/oauth-authz-req+jwt:
          schema:
            $ref: "#/components/schemas/GuestAuthorizationRequest"


    IdentifierSettings:
      description: Update identifier grant settings
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/identity.settings"
    IdentifierPermissionsSettings:
      description: Update identifier grant permissions settings
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/IdentifierPermissionsSettings"

    IdentifierSignup:
      description: Identifier Signup Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Identifier"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/Identifier"
    PasswordSignup:
      description: Password Signup Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/PasswordSignup"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/PasswordSignup"

  securitySchemes:
    id_token_hint:
      type: http
      scheme: bearer
      bearerFormat: JWS
      description: identifier reperentive token, can be retrived by lookup API

    reg_token:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "{{server-url}}/identity.authorize"
          scopes:
            locations:accounts.setAccountInfo: update account data
            locations:accounts.register: register password
            locations:accounts.finalizeRegistration: finalize account registration




    anonymous_oauth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: token.anonymus
          scopes:
            write:signup: create account
    apiKey:
      type: apiKey
      in: query
      name: apiKey
    basic:
      type: http
      scheme: basic
      description: Basic Authorization header using the Basic scheme.
    application_oauth:
      type: oauth2
      description: This API uses OAuth 2 with the clientCredentials grant flow.
      flows:
        clientCredentials:
          tokenUrl: /oauth2/token
          scopes:
            editor: admin user or application key with write access to configuration
            viewer: admin user or application key with view access to configuration
security:
  - apiKey: []
paths:
  # /identity.authorize.guest:

  #   post:
  #     security:
  #       - apiKey: [ ]

  #     tags:
  #       - registration:guest
  #     summary:  Identity Authorization
  #     operationId: Token.Request
  #     description: |
  #       This API generates a token that allows the end user to access and update certain fields in their account, based on the authorization details and grant type provided.

  #     requestBody:
  #       $ref: "#/components/requestBodies/GuestAuthorizationRequest"
  #     responses:
  #       "201":
  #         $ref: "#/components/responses/GuestAuthorizationResponse"
  #       "400":
  #         $ref: "#/components/responses/bad_request"
  #       "403":
  #         $ref: "#/components/responses/forbidden"
  #       "404":
  #         $ref: "#/components/responses/user_not_found"
  #       "405":
  #         $ref: "#/components/responses/requires_authentication"

  /identity.authorize:

    post:
      security:
        - apiKey: [ ]

      tags:
        - authorization:api
      summary:  Identity Authorization
      operationId: Token.Request

      requestBody:
        $ref: "#/components/requestBodies/AuthorizationRequest"
      responses:
        "201":
          $ref: "#/components/responses/AuthorizationResponse"
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/user_not_found"
        "405":
          $ref: "#/components/responses/requires_authentication"

  /accounts.setAccountInfo:
    post:
      security:
        - reg_token: [locations:accounts.setAccountInfo]

      tags:
        - Resource API
      summary: Set Account Info.
      operationId: Identity.setAccountInfo
      description: Update account information.
      requestBody:
        $ref: "#/components/requestBodies/SetAccountInfo"
      responses:
        "201":
          $ref: "#/components/responses/IdentifierSignup"
        "403":
          $ref: "#/components/responses/forbidden"
        "400":
          $ref: "#/components/responses/bad_request"

  /accounts.register:
    post:
      security:
        - reg_token: [locations:accounts.register]

      tags:
        - Resource API
      summary: Register.
      operationId: Identity.Signup.Register
      description: Completing the registration process, requires an account token, password, and any required fields.
      requestBody:
        $ref: "#/components/requestBodies/PasswordSignup"
      responses:
        "201":
          $ref: "#/components/responses/PasswordSignup"
        "403":
          $ref: "#/components/responses/forbidden"
        "400":
          $ref: "#/components/responses/bad_request"

  /accounts.finalizeRegistration:
    post:
      security:
        - reg_token: [locations:accounts.finalizeRegistration]

      tags:
        - Resource API
      summary: Finalize Registration.
      operationId: Identity.Signup.Complete
      description: Completing the registration process, requires an account token, password, and any required fields.
      requestBody:
        $ref: "#/components/requestBodies/PasswordSignup"
      responses:
        "201":
          $ref: "#/components/responses/PasswordSignup"
        "403":
          $ref: "#/components/responses/forbidden"
        "400":
          $ref: "#/components/responses/bad_request"


  /grants.identifier.set:
    post:
      security:
        - application_oauth:
            - editor
        - apiKey: []
          basic: []
      tags:
        - Identifier Grant Settings
      summary: Update Identifier Grant Settings
      operationId: Auth.Guest.Identifier.Set
      description: Get guest identifier settings.
      requestBody:
        $ref: "#/components/requestBodies/IdentifierSettings"
      responses:
        "201":
          $ref: "#/components/responses/IdentifierSettings"
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/forbidden"
  /grants.identifier.get:
    get:
      security:
        - application_oauth:
            - viewer
        - apiKey: []
          basic: []
      tags:
        - Identifier Grant Settings
      summary: Get Identifier Settings.
      operationId: Auth.Guest.Settings.Get
      description: Get guest identifier settings.
      responses:
        "200":
          $ref: "#/components/responses/IdentifierSettings"
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/forbidden"

  /permissions.set:
    post:
      security:
        - application_oauth:
            - editor
        - apiKey: []
          basic: []
      tags:
        - Permissions Settings
      summary: Update Permissions Settings
      operationId: Auth.Guest.Permissions.Set
      description: Get guest permissions settings.
      requestBody:
        $ref: "#/components/requestBodies/IdentifierPermissionsSettings"
      responses:
        "200":
          $ref: "#/components/responses/IdentifierPermissionsSettings"
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/forbidden"
  /permissions.get:
    get:
      security:
        - application_oauth:
            - viewer
        - apiKey: []
          basic: []
      tags:
        - Permissions Settings
      summary: Get Permissions Settings.
      operationId: Auth.Guest.Permissions.Get
      description: Get guest permissions settings.
      responses:
        "200":
          $ref: "#/components/responses/IdentifierPermissionsSettings"
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/forbidden"

  /identifiers.add:
    post:
      security:
        - anonymous_oauth: [write:signup]

      tags:
        - Resource API [NEW]
      summary: Add Identifier.
      operationId: Identity.Identifier.Signup
      description: Get or create account by identifier.
      requestBody:
        $ref: "#/components/requestBodies/IdentifierSignup"
      responses:
        "201":
          $ref: "#/components/responses/IdentifierSignup"
        "403":
          $ref: "#/components/responses/forbidden"
        "400":
          $ref: "#/components/responses/bad_request"

  /accounts.password.add:
    post:
      security:
        - reg_token: [locations:accounts.register]

      tags:
        - Resource API [NEW]
      summary: Add password for a given account.
      operationId: Identity.Password.Signup
      requestBody:
        $ref: "#/components/requestBodies/PasswordSignup"
      responses:
        "201":
          $ref: "#/components/responses/PasswordSignup"
        "403":
          $ref: "#/components/responses/forbidden"
        "400":
          $ref: "#/components/responses/bad_request"

