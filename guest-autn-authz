openapi: 3.1.0
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: https://github.com/Rebilly/generator-openapi-repo
info:
  license:
    name: accounts
    url: sap.cdc.accounts
  title: Guest Registration and Verification APIs
  description: |
    This API would accept a request with a grant_type and authorization_details. Depending on the values given, the API would then use JSON Schema to validate the authorization_details and the grant_type to determine the user's authorization level.

  version: "1.0"
tags:
  - name: authorization:api
    x-displayName: Authorization API
    description: |
      This API would accept a request with a grant_type and authorization_details. Depending on the values given, the API would then use JSON Schema to validate the authorization_details and the grant_type to determine the user's authorization level.

  - name: authn:api
    x-displayName: Authentication API
    description: |
      API for authentication, provide id_token to prove authontication.

  - name: registration:guest
    x-displayName: Guest
    description: |

      The guest authorization is used in conjunction with accounts APIs to provide a seamless and frictionless experience for end users who want to subscribe to newsletters or give consents without having to go through the process of registering for an account.

      The guest authorization API is similar to registration or login APIs, in that it creates an account for the user or returns an existing account token if one exists.
      However, the key difference is that the token generated by the guest authorization API has fewer permissions than a regular logged-in user account; the allowd fields defined by guest authorization schema.


      <div class="theme-admonition theme-admonition-note alert alert--secondary admonition_node_modules-@docusaurus-theme-classic-lib-theme-Admonition-styles-module">
        
        <div class="admonitionHeading_node_modules-@docusaurus-theme-classic-lib-theme-Admonition-styles-module">
          Granular Access
        </div>

        <div class="admonitionContent_node_modules-@docusaurus-theme-classic-lib-theme-Admonition-styles-module">
        <blockquote>

        This allows businesses to provide their guests with limited access to their services, without giving them full access to all of the APIs and data that a regular user would have.

         
        </blockquote>
        </div>
      </div>

      <SchemaDefinition schemaRef="#/components/schemas/GuestAuthorizationRequest" />

  - name: grant:verification
    x-displayName: Verification
    description: |

      The verified authorization grant is similar to guest grant, in that it return an account token with fewer permissions then a loggedin user. 

      However, the key difference is that the verified grant requires the user to verify their email or phone number before granting the access.

      ![Diagram](https://www.plantuml.com/plantuml/svg/NOu_Q-D04CNx-HHpkiQ6ayHTQSF5a3-faiRW9gHOxOwrWwLTPNRMmWxvxh500IVby9lVUs-Jr8ZcleDV76oN7Q5N7TAghiMCLSlgSvCJYOr1AMXbOrytoVhHoBaUBcAfddfATM-IajJpPKzDbBQCMJiETFLOVYVLH03IWSDWnFJeoJWIV0TyY46tV2Ry-my-06O0yCX72eX5SMUuE-4pZQaea1FQ6FRSPY676b7eBRCG7abupzOenr01K71p1mWDP1HNszmaAzpGfFt8NKDZx64qubQxAUY4z_q5h_7B7ZrtX0lSNTNWhITxm9lbj6hnn2bnQ9U0vSllLeZ27sUI9_TQ_fyrSck0f7603GMN--uJ)

      The allowd fields defined by **verified** authorization schema.

      <div class="theme-admonition theme-admonition-note alert alert--secondary admonition_node_modules-@docusaurus-theme-classic-lib-theme-Admonition-styles-module">
        
        <div class="admonitionHeading_node_modules-@docusaurus-theme-classic-lib-theme-Admonition-styles-module">
          Positive friction journeys
        </div>

        <div class="admonitionContent_node_modules-@docusaurus-theme-classic-lib-theme-Admonition-styles-module">
        <blockquote>

        By adding the verification step buisnesses can provide to their customers a more secure experience for the data collection; Which allows collecting a more sensitive data, while still providing a frictionless experience, or minimum friction experience for the user.

         
        </blockquote>
        </div>
      </div>


      <SchemaDefinition schemaRef="#/components/schemas/VerifiedAuthorizationRequest" />

x-tagGroups:
  - name: Authorization API
    expended: true
    tags:
      - authorization:api

  - name: Authontication API
    expended: true
    tags:
      - authn:api
  - name: Authorization Type
    tags:
      - registration:guest
      - phonenumber:confirmation
      - grant:verification
      - email:confirmation
      - grant:confirmation
      - registration:password

  - name: Resource API
    tags:
      - Resource API

  - name: Settings
    tags:
      - Identifier Grant Settings
      - Permissions Settings
  - name: Authorization Grants
    tags:
      - grant

servers:
  - url: https://accounts.{env}
    variables:
      env:
        default: gigya.com
        enum:
          - gigya.com
          - eu1.gigya.com
          - au1.gigya.com
          - us1-st1.gigya.com
          - eu1-st1.gigya.com
          - au1-s1.gigya.com
          - cn1.sapcdm.cn
          - cn1-st1.sapcdm.cn
        description: gigya domain
components:
  schemas:
    OTPVerificationRequest:
      properties:
        otp:
          type: string
          description: The OTP code to be verified
          example: 123456
        vToken:
          type: string
          description: The token representing the email or phone number to be verified
          example: asdawrawr232

    EmailIdentifier:
      title: Email Identifier
      properties:
        email:
          format: email
          type: string
      required:
        - email

    PhoneIdentifier:
      title: Phone Identifier
      properties:
        phonenumber:
          type: string
          format: phonenumber
          example: (212)456-7890
      required:
        - phonenumber

    AuthorizationRequest:
      oneOf:
        - title: "Guest Registration"
          $ref: "#/components/schemas/GuestAuthorizationRequest"

        - title: "Guest Registration - With Verification"
          $ref: "#/components/schemas/VerifiedAuthorizationRequest"

        - title: "Logged-In Authorization Grant"
          $ref: "#/components/schemas/LoggedInGrant"

    LoggedInGrant:
      description: |
        The LoggedInGrant is used to grant access to a user that is already logged in.
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/BrowserLoginGrant"
            - $ref: "#/components/schemas/MobileLoginGrant"

    BrowserLoginGrant:
      x-tags:
        - grant
      title: browser session (login_token)
      properties:
        grant_type:
          enum:
            - urn:gigya:authz:token:browser
        login_token:
          type: string

    MobileLoginGrant:
      x-tags:
        - grant
      title: mobile session (oauth_token)
      properties:
        grant_type:
          const: urn:gigya:authz:token:mobile
          default: urn:gigya:authz:token:mobile
        oauth_token:
          type: string

    EmailGrant:
      x-tags:
        - grant
      title: Email Identifier
      allOf:
        - properties:
            grant_type:
              enum:
                - urn:gigya:identifier:email
          required:
            - grant_type

        - $ref: "#/components/schemas/EmailIdentifier"

    IdentifierGrant:
      $ref: "#/components/schemas/QueryIdentifierGrant"
      x-tags:
        - grant

    AuthorizationDetailstWithIdentifier:
      title: "Account Identifier Authorization Details"
      allOf:
        - oneOf:
            - title: "Email Identifier"
              properties:
                authorization_details:
                  minItems: 1
                  items:
                    $ref: "#/components/schemas/EmailIdentifier"

            - title: "Phone Identifier"
              properties:
                authorization_details:
                  minItems: 1
                  items:
                    $ref: "#/components/schemas/PhoneIdentifier"

    PhonenumberGrant:
      title: Phone Identifier
      properties:
        grant_type:
          const: urn:gigya:identifier:phonenumber
        phonenumber:
          type: string
          format: phonenumber
          example: (212)456-7890
      required:
        - phonenumber

    JWTBearerGrantType:
      title: JWT Bearer Grant Type
      description: A JSON Web Token (JWT), represent the end user or the end user identifier for which the access token is being requested, as defined in [RFC7523, section 2.1.](https://datatracker.ietf.org/doc/html/rfc7523#section-2.1)
      enum:
        - urn:ietf:params:oauth:grant-type:jwt-bearer

    EmailVerificationGrant:
      required:
        - grant_type
        - assertion
      properties:
        grant_type:
          $ref: "#/components/schemas/JWTBearerGrantType"
        assertion:
          description: A JWT that contains the email verification details of an end user.
          type: string
          $ref: "#/components/schemas/EmailVerificationToken"

    PhoneVerificationGrant:
      required:
        - grant_type
        - assertion
      properties:
        grant_type:
          $ref: "#/components/schemas/JWTBearerGrantType"
        assertion:
          type: string
          description: A JWT that contains the phone verification details of an end user.
          $ref: "#/components/schemas/PhoneVerificationToken"

    VerifiedChannelGrant:
      oneOf:
        - title: "Email Verification"
          description: |
            The Email Verification Grant is used to grant access to a user that have been verified VIA email.
          $ref: "#/components/schemas/EmailVerificationGrant"
        - title: "Phone Verification"
          description: |
            The Phone Verification Grant is used to grant access to a user that have been verified VIA phone.
          $ref: "#/components/schemas/PhoneVerificationGrant"

      title: Verification Grant
      x-audience: Next

    CommonAuthNClaims:
      title: Common claims for authentication tokens
      additionalProperties: true
      description: |
        The following claims are common to all authentication tokens.
      properties:
        exp:
          type: number
          description: The expiration time of the token, in seconds since the Unix epoch.
        iat:
          type: number
          description: The time at which the token was issued, in seconds since the Unix epoch.
        jti:
          type: string
          description: The unique identifier for the token.
        nonce:
          type: string
          description: The nonce value used to associate a client session with an ID Token, and to mitigate replay attacks.
        aud:
          type: string
          description: The audience for the token.

        risk:
          type: object
          description: The risk score of the authentication request.
          properties:
            score:
              type: number
              description: The risk score of the authentication request.
            provider:
              type: string
              description: The risk provider.
              example: google.recaptcha
              enum:
                - google.recaptcha
                - gigya.risk
            reasons:
              type: array
              description: The risk reasons of the authentication request.
              items:
                type: string
                description: The risk reason of the authentication request.

        app_id:
          type: string
          description: The application id (user key) of the client that the user is using to authenticate.

        device:
          properties:
            id:
              type: string
              description: The device ID of the device that the user is using to authenticate.
            ip:
              type: string
              format: ipv4
              description: The IP address of the device that the user is using to authenticate.
            user_agent:
              type: string
              description: The user agent of the device that the user is using to authenticate.

        zoneinfo:
          description: either existing user zone or the zone from request if user not exists
          enum:
            - eu1
            - us1
            - au1

      required:
        - iss
        - exp
        - sub
        - zoneinfo

    EmailVerificationToken:
      title: Email Assertion
      type: array
      contentEncoding: base64
      contentMediaType: application/jwt
      minItems: 2
      prefixItems:
        - const:
            typ: authn+jwt
            alg: ES256
            iss: https://authn.${env.server}/email
        - title: Email Verification token payload
          description: Claims of email verification token
          allOf:
            - $ref: "#/components/schemas/CommonAuthNClaims"
            - properties:
                sub:
                  properties:
                    id:
                      type: string
                      format: email
                    provider:
                      const: email
                    verified:
                      const: true
                  required:
                    - id
                    - provider
                  description: The subject of the token is the email address.
                auth-factor:
                  type: string
                  enum:
                    - otp
                    - link
                  description: The authentication flow that was used to generate the token.

    PhoneVerificationToken:
      title: Phone Assertion
      type: array
      contentEncoding: base64
      contentMediaType: application/jwt
      minItems: 2
      prefixItems:
        - const:
            typ: authn+jwt
            alg: ES256
            iss: https://authn.${env.server}/phone
        - title: Phone Verification token payload
          description: Claims of phone verification token
          allOf:
            - $ref: "#/components/schemas/CommonAuthNClaims"
            - properties:
                sub:
                  properties:
                    id:
                      type: string
                      format: phonenumber
                    provider:
                      const: phonenumber
                    verified:
                      const: true
                  required:
                    - id
                    - provider
                  description: The subject of the token is the phone number.
                auth-factor:
                  type: string
                  enum:
                    - otp
                  description: The authentication flow that was used to generate the token.

    VerificationToken:
      title: Verification Token
      type: string
      contentEncoding: base64
      contentMediaType: application/jwt
      description: |
        A JWT that represents channel verification.
      anyOf:
        - $ref: "#/components/schemas/EmailVerificationToken"
        - $ref: "#/components/schemas/PhoneVerificationToken"

    GuestTokenResponse:
      allOf:
        - $ref: "#/components/schemas/GuestAuthorizationRequest"
        - properties:
            access_token:
              $ref: "#/components/schemas/JwtToken"
              description: The access token issued by the authorization endpoint.
            token_type:
              type: string
              description: A case-insensitive value specifying the method of using the access token issued
              enum:
                - Bearer
            expires_in:
              type: integer
              description: The lifetime of the access token (in seconds).

    AuthorizationResponse:
      allOf:
        - $ref: "#/components/schemas/RichAuthorizationRequest"
        - properties:
            authorization_details:
              items:
                anyOf:
                  - $ref: "#/components/schemas/AuthorizationDetailsSignupGuest"
                  - $ref: "#/components/schemas/AuthorizationDetailstWithIdentifier"
                  - $ref: "#/components/schemas/AuthorizationDetailsVerifiedGuestSignup"
                  - $ref: "#/components/schemas/AuthorizationDetails"
                  - properties:
                      uid:
                        type: string

            access_token:
              type: string
              $ref: "#/components/schemas/JwtToken"
              description: The access token issued by the authorization endpoint.
            token_type:
              type: string
              description: A case-insensitive value specifying the method of using the access token issued
              enum:
                - Bearer
            expires_in:
              type: integer
              description: The lifetime of the access token (in seconds).

    QueryIdentifierGrant:
      title: Query Identifier Grant.
      x-audience: Next
      oneOf:
        - $ref: "#/components/schemas/EmailGrant"
        - $ref: "#/components/schemas/PhonenumberGrant"

    RichAuthorizationRequest:
      required:
        - authorization_details
      properties:
        authorization_details:
          type: array
          minItems: 1

    GuestAuthorizationRequest:
      x-tags:
        - registration:guest
      summary: "Authorization request for guest signup"
      allOf:
        - properties:
            authorization_details:
              items:
                $ref: "#/components/schemas/AuthorizationDetailsSignupGuest"

        - $ref: "#/components/schemas/QueryIdentifierGrant"

        - $ref: "#/components/schemas/RichAuthorizationRequest"

    VerifiedAuthorizationRequest:
      x-tags:
        - grant:verification
      summary: "Authorization request for guest signup"
      allOf:
        - properties:
            authorization_details:
              minItems: 1
              items:
                $ref: "#/components/schemas/AuthorizationDetailsVerifiedGuestSignup"
          required:
            - authorization_details

        - $ref: "#/components/schemas/RichAuthorizationRequest"

        - $ref: "#/components/schemas/VerifiedChannelGrant"

    AuthorizationDetails:
      title: Authorization for specific fields;
      properties:
        fields:
          description: Access for specific fields;
          type: object
          properties:
            $ref:
              type: string
              format: uri-reference
              pattern: ^https://.+\.gigya\.com/schemas/.+$
          additionalProperties:
            $ref: "#/components/schemas/field"
        account:
          description: Access for specific values;
          $ref: "#/components/schemas/Account"

    AuthorizationDetailsGroupMember:
      allOf:
        - properties:
            type:
              const: on-behalf-of:group:member
            locations:
              type: array
              items:
                type: string
                enum:
                  - /groups/members
            group:
              type: string
              example: group1

    AuthorizationDetailsVerifiedGuestSignup:
      description: "Authorization details for a sighup as a guest with a verified channel"
      summary: "Authorization details for a sighup as a guest "
      properties:
        type:
          description: |
            The type of authorization data as a string. This field defines which other elements are allowed in the request 
            [RFC](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-rar-08#section-2.1).
          const: self-service:registration:guest
        locations:
          type: array
          items:
            type: string
          const:
            - auth.register
            - accounts.setAccountInfo
            - accounts.getAccountsInfo
        resource:
          enum:
            - account:access:guest:verified

        actions:
          type: array
          items:
            type: string
          const:
            - create
            - update
            - read

    AuthorizationDetailsSignupGuest:
      description: "Authorization details for a sighup as a guest"
      summary: "Authorization details for a sighup as a guest"
      properties:
        type:
          description: |
            The type of authorization data as a string. This field defines which other elements are allowed in the request 
            [RFC](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-rar-08#section-2.1).
          const: self-service:registration:guest
        locations:
          type: array
          const:
            - auth.register
            - accounts.setAccountInfo
          items:
            type: string
        resource:
          enum:
            - account:access:guest

        actions:
          type: array
          const:
            - create
            - update
          items:
            type: string

    Uid:
      type: string
      format: uuid
      example: 753487e7-10bc-4e69-b3b2-4da33721ea3e

    JwtToken:
      type: array
      contentEncoding: base64
      contentMediaType: application/jwt
      minItems: 2
      prefixItems:
        - const:
            typ: at+jwt
            alg: ES256
        - $ref: "#/components/schemas/TokenDetails"

    TokenDetails:
      required:
        - iss
        - exp
      allOf:
        - properties:
            iss:
              const: https://auth.${env.server}/guest/identifier
              type: string
              format: uri
            sub:
              $ref: "#/components/schemas/Uid"
              description: newly generated id or existing id of a user
            sub_type:
              type: string
              enum:
                - uid
            zoneinfo:
              description: either existing user zone or the zone from request if user not exists
              enum:
                - eu1
                - us1
                - au1
        - $ref: "#/components/schemas/AuthorizationRequest"

    basic_response:
      x-tags:
        - basic_response
      type: object
      required:
        - callId
        - errorCode
        - time
      properties:
        errorCode:
          type: integer
          readOnly: true
        callId:
          type: string
          readOnly: true
          $comment: automaticly added by gator
        time:
          type: string
          format: date-time
          $comment: automaticly added by gator
        statusCode:
          type: integer
          minimum: 200
          maximum: 599
          $comment: automaticly added by gator (calculated by error code)
        apiVersion:
          type: integer
          const: 2
          $comment: automaticly added by gator (calculated by error code)
      additionalProperties: true
    error_response:
      x-tags:
        - error_response
      type: object
      required:
        - errorCode
        - errorMessage
        - errorDetails
      allOf:
        - $ref: "#/components/schemas/basic_response"
      properties:
        errorMessage:
          type: string
        errorCode:
          type: integer
          minimum: 400000
          maximum: 599999
        errorDetails:
          type: string
        statusCode:
          type: integer
          minimum: 400
          maximum: 599
    field:
      oneOf:
        - type: boolean
        - properties:
            readOnly:
              type: boolean
            writeOnly:
              type: boolean

    Account:
      type: object
      properties:
        profile:
          $ref: components\account-schema\schemas\profile.json
        data:
          $ref: components\account-schema\schemas\data.json
        subscriptions:
          $ref: components\account-schema\schemas\subscriptions.json
        preferences:
          $ref: components\account-schema\schemas\preferences.json
    AuthnVerificationResponse:
      properties:
        id_token:
          type: string
          $ref: "#/components/schemas/VerificationToken"
          description: The access token issued by the authorization endpoint.
        token_type:
          type: string
          description: A case-insensitive value specifying the method of using the token issued
          enum:
            - Bearer
        expires_in:
          type: integer
          description: The lifetime of the token (in seconds).

  responses:
    AuthnVerificationResponse:
      description: The response to a verification request.
      links:
        id_token:
          operationId: Token.Request
          parameters:
            assertion: "$response.body#/id_token"
            grant_type: "urn:ietf:params:oauth:grant-type:jwt-bearer"

      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/basic_response"
              - $ref: "#/components/schemas/AuthnVerificationResponse"

    AuthorizationResponse:
      description: Guest token created.
      links:
        access_token:
          operationId: Identity.setAccountInfo
          parameters:
            oauth_token: "$response.body#/access_token"

      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/AuthorizationResponse"
              - $ref: "#/components/schemas/basic_response"

    bad_request:
      description: Invalid parameter value.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/error_response"
              - properties:
                  errorMessage:
                    const: Invalid parameter value.
                  errorCode:
                    const: 400006
                  statusCode:
                    const: 400
    ok_response:
      description: OK.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/basic_response"
              - type: object
                properties:
                  statusCode:
                    const: 200
    forbidden:
      description: Forbidden.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/error_response"
              - type: object
                properties:
                  links:
                    type: array
                    items:
                      title: Authorization
                      description: The authorization endpoint.
                      const:
                        href: "{{server-url}}/identity.authorize"
                        rel: authorize
                        method: POST

                  errorMessage:
                    const: You do not have permission to invoke the method.
                  errorCode:
                    const: 403000
                  statusCode:
                    const: 403
    user_not_found:
      description: Caused by an invalid UID, or a UID not applicable to the current API key.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/error_response"
              - type: object
                properties:
                  errorMessage:
                    const: UID not found
                  errorCode:
                    const: 404003
                  statusCode:
                    const: 404
    requires_authentication:
      description: Requires authentication; the authorization details requested requires an additinal authentication.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/error_response"
              - properties:
                  errorMessage:
                    const: Unauthorized user.
                  errorCode:
                    const: 403005
                  statusCode:
                    const: 403

  requestBodies:
    OTPVerificationRequest:
      description: OTP Verification Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OTPVerificationRequest"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/OTPVerificationRequest"

    SetAccountInfo:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Account"

    AuthorizationRequest:
      description: An authorization request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthorizationRequest"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/AuthorizationRequest"
        application/oauth-authz-req+jwt:
          schema:
            $ref: "#/components/schemas/AuthorizationRequest"

  securitySchemes:
    id_token_hint:
      type: http
      scheme: bearer
      bearerFormat: JWS
      description: identifier reperentive token, can be retrived by lookup API

    reg_token:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: "{{server-url}}/identity.authorize"
          scopes:
            locations:accounts.setAccountInfo: update account data
            locations:accounts.register: register password
            locations:accounts.finalizeRegistration: finalize account registration

    anonymous_oauth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: token.anonymus
          scopes:
            write:signup: create account
    apiKey:
      type: apiKey
      in: query
      name: apiKey
    basic:
      type: http
      scheme: basic
      description: Basic Authorization header using the Basic scheme.
    application_oauth:
      type: oauth2
      description: This API uses OAuth 2 with the clientCredentials grant flow.
      flows:
        clientCredentials:
          tokenUrl: /oauth2/token
          scopes:
            editor: admin user or application key with write access to configuration
            viewer: admin user or application key with view access to configuration
security:
  - apiKey: []
paths:
  /identity.authorize:
    post:
      security:
        - apiKey: []

      tags:
        - authorization:api
      summary: Identity Authorization
      operationId: Token.Request

      requestBody:
        $ref: "#/components/requestBodies/AuthorizationRequest"
      responses:
        "201":
          $ref: "#/components/responses/AuthorizationResponse"
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/forbidden"
        "405":
          $ref: "#/components/responses/requires_authentication"

  /accounts.auth.otp.verify:
    post:
      security:
        - apiKey: []
      tags:
        - authn:api
      summary: OTP Verification
      operationId: OTP.Verification
      requestBody:
        $ref: "#/components/requestBodies/OTPVerificationRequest"
      responses:
        "200":
          $ref: "#/components/responses/AuthnVerificationResponse"
        "400":
          $ref: "#/components/responses/bad_request"
        "403":
          $ref: "#/components/responses/forbidden"

  /accounts.setAccountInfo:
    post:
      security:
        - reg_token: [locations:accounts.setAccountInfo]

      tags:
        - Resource API
      summary: Set Account Info.
      operationId: Identity.setAccountInfo
      description: Update account information.
      requestBody:
        $ref: "#/components/requestBodies/SetAccountInfo"
      responses:
        "200":
          $ref: "#/components/responses/ok_response"
        "403":
          $ref: "#/components/responses/forbidden"
        "404":
          $ref: "#/components/responses/user_not_found"

        "400":
          $ref: "#/components/responses/bad_request"
