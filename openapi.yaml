openapi: 3.1.0
info:
  title: Management API
  description: Api specification for manges customer interactions.
  version: '1.0'
servers:
  - url: 'https://{gigya-domain}/api/mng'
    variables:
      gigya-domain:
        default: admin.gigya.com
        enum:
          - admin.gigya.com
          - admin.eu1.gigya.com
          - admin.au1.gigya.com
        description: giya domains
paths:
  /interactions:
    summary: Communications Interaction
    post:
      tags:
        - Interaction
      summary: Create Interaction Template
      operationId: CreateInteractionTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/interaction.template'
      responses:
        '201':
          description: Template Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/interaction.template'
              examples:
                signup-interaction-email-lite:
                  $ref: '#/components/examples/signup-interaction-email-lite'
                signup-interaction-mobile-otp:
                  $ref: ..\components\examples\signup-interaction-mobile-otp.yaml
                signup-interaction-selector:
                  $ref: >-
                    ..\components\examples\signup-interaction-mobile-selector.yaml
          links:
            GetInteractionTemplate:
              operationId: GetInteractionTemplate
              parameters:
                template: $request.body#/name
              description: Get interaction template.
            UpdateInteractionTemplate:
              operationId: UpdateInteractionTemplate
              parameters:
                template: $request.body#/name
              description: Update interaction template.
            PostInteractionDetails:
              operationId: PostInteractionDetails
              parameters:
                template: $request.body#/name
                schema: $request.body#/input
              description: Post interaction details.
        '400':
          $ref: '#/components/responses/errors.bad_request'
        '403':
          $ref: '#/components/responses/errors.forbidden'
        '503':
          $ref: '#/components/responses/errors.service_unavailable'
  '/interactions/{template}':
    put:
      tags:
        - Interaction
      operationId: UpdateInteractionTemplate
      summary: Update Interaction Template
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/interaction.template'
      responses:
        '200':
          description: Template Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/interaction.template'
              examples:
                signup-interaction-email-lite:
                  $ref: '#/components/examples/signup-interaction-email-lite'
                signup-interaction-mobile-otp:
                  $ref: ..\components\examples\signup-interaction-mobile-otp.yaml
                signup-interaction-selector:
                  $ref: '#/components/examples/signup-interaction-selector'
    get:
      tags:
        - Interaction
      operationId: GetInteractionTemplate
      parameters:
        - in: path
          name: template
          required: true
          description: Specifies the interaction template to return.
          schema:
            type: string
      summary: Get Interaction Template
      responses:
        '200':
          description: Interaction Template Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/interaction.template'
              examples:
                signup-interaction-email-lite:
                  $ref: '#/components/examples/signup-interaction-email-lite'
                signup-interaction-mobile-otp:
                  $ref: ..\components\examples\signup-interaction-mobile-otp.yaml
                signup-interaction-selector:
                  $ref: '#/components/examples/signup-interaction-selector'
          links: null
  /subscribtions:
    summary: Create Subscription Schema
    post:
      tags:
        - Subscription
      summary: Create subscription schema.
      operationId: CreateSubscription
      description: Create subscription schema
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - properties:
                    name:
                      type: string
                      example: newslatter
                    schema:
                      $ref: '#/components/schemas/fields.template.subscription'
      responses:
        '201':
          description: Subscription template was created successfully
          content:
            application/json:
              schema:
                properties:
                  name:
                    type: string
                    example: newslatter
                  schema:
                    $ref: '#/components/schemas/fields.template.subscription'
          links:
            get:
              operationId: GetSubscriptionTemplate
              parameters:
                subscriptionId: response.body#/name
              description: Gets subscription definition.
            update:
              operationId: UpdateSubscription
              parameters:
                subscriptionId: $response.body#/name
              description: Updates subscription definition.
            channel:
              operationId: SetSubscriptionChannel
              parameters:
                subscriptionId: $response.body#/name
              description: Updates subscription definition.
        '400':
          $ref: ..\..\shared\errors\bad_request.yaml
        '401':
          $ref: ..\..\shared\errors\requires_authentication.yaml
        '403':
          $ref: ..\..\shared\errors\forbidden.yaml
        '503':
          $ref: ..\..\shared\errors\service_unavailable.yaml
  '/subscribtions/{subscriptionId}':
    get:
      tags:
        - Config
      operationId: GetSubscriptionTemplate
      summary: Gets subscription definition
      parameters:
        - in: path
          name: list
          example: newslatter
      responses:
        '200':
          description: Subscription template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fields.template.subscription'
        '401':
          $ref: ..\..\shared\errors\requires_authentication.yaml
        '403':
          $ref: ..\..\shared\errors\forbidden.yaml
        '404':
          $ref: ..\..\shared\errors\not_found.yaml
        '503':
          $ref: ..\..\shared\errors\service_unavailable.yaml
    put:
      tags:
        - Config
      summary: Updates subscription template.
      operationId: UpdateSubscription
      description: Update subscription template
      parameters:
        - in: path
          name: list
          example: newslatter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fields.template.subscription'
      responses:
        '200':
          description: Subscription template was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fields.template.subscription'
          links:
            subscriptionLinks:
              operationId: GetSubscriptionTemplate
              parameters:
                subscriptionId: $response.body#/subscriptionId
              description: A refrence to the specific subscription template.
        '400':
          $ref: ..\..\shared\errors\bad_request.yaml
        '401':
          $ref: ..\..\shared\errors\requires_authentication.yaml
        '403':
          $ref: ..\..\shared\errors\forbidden.yaml
        '503':
          $ref: ..\..\shared\errors\service_unavailable.yaml
  '/subscribtions/{subscriptionId}/fields':
    post:
      tags:
        - Config
      operationId: CreateSubscriptionField
      summary: Create Subscription Field
      parameters:
        - in: path
          name: list
          example: newslatter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fields.template.basic'
      responses:
        '201':
          description: Add subscription field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fields.template.basic'
          links:
            updateSubscriptionField:
              operationId: UpdateSubscriptionField
              parameters:
                fieldId: $response.body#/fieldId
                subscriptionId: $request.path#/subscriptionId
              description: Updates the specifys subscription field.
            getSubscriptionField:
              operationId: UpdateSubscriptionField
              parameters:
                fieldId: $response.body#/fieldId
                subscriptionId: $request.path#/subscriptionId
              description: Updates the specifys subscription field.
        '400':
          $ref: ..\..\shared\errors\bad_request.yaml
        '401':
          $ref: ..\..\shared\errors\requires_authentication.yaml
        '403':
          $ref: ..\..\shared\errors\forbidden.yaml
        '404':
          $ref: ..\..\shared\errors\not_found.yaml
        '503':
          $ref: ..\..\shared\errors\service_unavailable.yaml
  '/template/{subscriptionId}/fields/{fieldId}':
    put:
      tags:
        - Config
      operationId: UpdateSubscriptionField
      description: Updates the specifys subscription field.
      summary: Updates the a subscription field.
      parameters:
        - in: path
          name: list
          example: newslatter
        - in: path
          name: fieldId
          example: frequency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fields.template.basic'
      responses:
        '200':
          description: Add subscription field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fields.template.basic'
        '401':
          $ref: ..\..\shared\errors\requires_authentication.yaml
        '403':
          $ref: ..\..\shared\errors\forbidden.yaml
        '404':
          $ref: ..\..\shared\errors\not_found.yaml
        '503':
          $ref: ..\..\shared\errors\service_unavailable.yaml
    get:
      tags:
        - Subscription
      operationId: GetSubscriptionField
      description: Gets the specified subscription field.
      summary: Gets the specified subscription field.
      parameters:
        - in: path
          name: subscriptionId
          example: newslatter
        - in: path
          name: fieldId
          example: frequency
      responses:
        '200':
          description: Subscription field template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fields.template.basic'
  '/subscribtions/{subscriptionId}/fields/channel':
    post:
      tags:
        - Config
      operationId: SetSubscriptionChannel
      description: Set the subscription channel.
      summary: Set the subscription channel.
      parameters:
        - in: path
          name: list
          example: newslatter
        - in: path
          name: fieldId
          example: frequency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fields.template.channel'
      responses:
        '200':
          description: channel updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fields.template.channel'
        '401':
          $ref: ..\..\shared\errors\requires_authentication.yaml
        '403':
          $ref: ..\..\shared\errors\forbidden.yaml
        '404':
          $ref: ..\..\shared\errors\not_found.yaml
        '503':
          $ref: ..\..\shared\errors\service_unavailable.yaml
    get:
      tags:
        - Config
      operationId: GetSubscriptionChannel
      description: Gets the subscribtion channel.
      summary: Gets the subscribtion channel.
      parameters:
        - in: path
          name: list
          example: newslatter
        - in: path
          name: fieldId
          example: frequency
      responses:
        '200':
          description: Subscription channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fields.template.channel'
tags: []
components:
  schemas:
    fields.template.basic:
      properties:
        type:
          type: string
          enum:
            - string
            - boolean
            - integer
            - number
        default:
          type: '#/properties/type'
        widget:
          type: string
        format:
          type: string
      x-tags:
        - field-template
    fields.template.boolean:
      allOf:
        - $ref: '#/components/schemas/fields.template.basic'
        - properties:
            type:
              type: string
              const: boolean
            default:
              type: boolean
    opt-in-sms: &ref_1
      properties:
        properties:
          additionalProperties:
            $ref: '#/components/schemas/fields.template.boolean'
            pattern: ^(subscriptions.sms.*)
    opt-in-email: &ref_2
      properties:
        properties:
          additionalProperties:
            $ref: '#/components/schemas/fields.template.boolean'
            pattern: ^(subscriptions.email.*)
    selector: &ref_3
      type: object
      properties:
        channel:
          $ref: .\fields.template.channel.yaml/#/$defs/channel
        oneOf:
          type: array
          items:
            anyOf:
              - title: if-channel-sms
                allOf:
                  - $ref: .\fields.template.channel.yaml/#/$defs/if-channel-sms
                  - properties:
                      then:
                        $ref: '#/components/schemas/opt-in-sms'
              - title: if-channel-email
                allOf:
                  - $ref: .\fields.template.channel.yaml/#/$defs/if-channel-email
                  - properties:
                      then:
                        $ref: '#/components/schemas/opt-in-email'
    opt-in-field: &ref_0
      properties:
        properties:
          additionalProperties:
            $ref: '#/components/schemas/fields.template.boolean'
            pattern: ^(subscriptions.*)
    fields.template.string:
      allOf:
        - $ref: '#/components/schemas/fields.template.basic'
        - properties:
            type:
              type: string
              enum:
                - string
    fields.phone_number:
      type: object
      x-identifier: phonenumber
      properties:
        phonenumber:
          allOf:
            - $ref: '#/components/schemas/fields.template.string'
            - format: email
    identity.mobile:
      type: object
      title: mobile identity
      properties:
        properties:
          $ref: '#/components/schemas/fields.phone_number'
        x-identifier:
          enum:
            - phonenumber
          readonly: true
        x-verification-method:
          enum:
            - otp
            - auto-bind
    fields.email:
      type: object
      x-identifier: email
      properties:
        email:
          $ref: '#/components/schemas/fields.template.string'
    identity.email:
      type: object
      title: email identity
      properties:
        properties:
          allOf:
            - $ref: '#/components/schemas/fields.email'
        x-identifier:
          readonly: true
          enum:
            - email
        x-verification-method:
          enum:
            - otp
            - link
            - auto-bind
    fields.template.subscription:
      type: object
      anyOf:
        - title: channel selector
          $ref: '#/components/schemas/selector'
        - title: only mobile
          allOf:
            - $ref: '#/components/schemas/identity.mobile'
            - $ref: '#/components/schemas/opt-in-sms'
        - title: only email
          allOf:
            - $ref: '#/components/schemas/identity.email'
            - $ref: '#/components/schemas/opt-in-email'
          maxProperties: 5
      required: subscribed
      $defs:
        opt-in:
          type: object
          $ref: '#/components/schemas/opt-in-field'
          oneOf:
            - title: by channel
              $ref: '#/components/schemas/selector'
            - title: const
              $ref: '#/components/schemas/opt-in-field'
        opt-in-field: *ref_0
        opt-in-sms: *ref_1
        opt-in-email: *ref_2
        selector: *ref_3
        channel-email:
          title: if-channel-email
          allOf:
            - $ref: .\fields.template.channel.yaml/#/$defs/if-channel-email
            - properties:
                then:
                  $ref: '#/components/schemas/opt-in-email'
        channel-sms:
          title: if-channel-sms
          allOf:
            - $ref: .\fields.template.channel.yaml/#/$defs/if-channel-sms
            - properties:
                then:
                  $ref: '#/components/schemas/opt-in-sms'
    fields.profile.lastName:
      properties:
        profile.lastName:
          properties:
            type:
              enum:
                - string
    fields.sections.profile:
      title: Profile Fields
      description: Profile fields to collect during interaction.
      type: object
      anyOf:
        - $ref: '#/components/schemas/fields.profile.lastName'
        - $ref: '#/components/schemas/fields.profile.lastName'
        - additionalProperties:
            type: object
            pattern: ^(profile.*)
            properties:
              properties:
                $ref: '#/components/schemas/fields.template.basic'
            example:
              profile.zip:
                type: string
    fields.template.object:
      title: Object Schema Template
      description: Describes schema's properties for a section.
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/fields.template.basic'
        required:
          type: array
          items:
            type: string
      maxProperties: 5
    fields.sections.identity:
      type: object
      properties:
        identity:
          type: object
          properties:
            dependentRequired:
              type: object
              properties:
                properties:
                  type: object
                  additionalProperties:
                    type: array
                    examples:
                      channel:
                        - email
          anyOf:
            - $ref: '#/components/schemas/identity.mobile'
            - $ref: '#/components/schemas/identity.email'
    fields.sections.data:
      title: Custom data fields
      description: Custom data fields to collect during interaction.
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: object
            pattern: ^(data.*)
            properties:
              properties:
                $ref: '#/components/schemas/fields.template.basic'
          example:
            data.zip:
              type: string
            data.it-dep:
              type: boolean
    fields.sections.subscriptions:
      title: Subscriptions Fields
      description: Subscribtions fields to collect during interaction.
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: object
            pattern: ^(subscriptions.*)
            properties:
              properties:
                $ref: '#/components/schemas/fields.template.subscription'
            example:
              subscriptions.newslatter:
                type: boolean
    fields.sections.consents:
      title: Consents Fields
      description: Consents to collect during interaction.
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: object
            pattern: ^(consents.*)
            properties:
              properties:
                $ref: '#/components/schemas/fields.template.boolean'
            example:
              consents.tos:
                type: boolean
    template.schema:
      description: >-
        A set of key-value pairs that describe the schema input of an
        intraction.
      type: object
      anyOf:
        - title: subscribtions fields
          $ref: '#/components/schemas/fields.template.subscription'
        - title: profile fields
          $ref: '#/components/schemas/fields.sections.profile'
        - title: any field
          $ref: '#/components/schemas/fields.template.object'
        - properties:
            identity:
              $ref: '#/components/schemas/fields.sections.identity'
            data:
              $ref: '#/components/schemas/fields.sections.data'
            profile:
              $ref: '#/components/schemas/fields.sections.profile'
            subscriptions:
              $ref: '#/components/schemas/fields.sections.subscriptions'
            consents:
              $ref: '#/components/schemas/fields.sections.consents'
      required: identity
    template.outcomes:
      type: object
      readOnly: true
      description: >-
        A set of key-value pairs that describe the possible outcomes of the
        interactions.
      properties:
        authentication:
          type: object
          readOnly: true
          properties:
            output:
              readOnly: true
              type: object
              properties:
                type:
                  type: string
                  readOnly: true
                  default: auth
                identity:
                  type: string
                  readOnly: true
                  default: '#/properties/identity'
        authorized:
          type: object
          readOnly: true
          properties:
            output:
              type: object
              readOnly: true
              properties:
                type:
                  type: string
                  readOnly: true
                  default: projection
                identity:
                  type: string
                  readOnly: true
                  default: '#/properties/identity'
                profile:
                  type: string
                  readOnly: true
                  default: '#/properties/profile'
                subscriptions:
                  type: string
                  readOnly: true
                  default: '#/properties/subscriptions'
                consents:
                  type: string
                  readOnly: true
                  default: '#/properties/consents'
    Link:
      title: Hypermedia Link Relationship
      description: >-
        The target URL indicated in the `href` property is related to the
        current\nresource according to the defined semantics of the link
        relationship name.
      oneOf:
        - type: object
          title: Single Link
          properties:
            href:
              description: The hypertext reference to a related resource.
              type: string
              format: uri
            title:
              description: A descriptive title for the link.
              type: string
            type:
              description: A media type hint for the resource identified by the href.
              type: string
              default: application/json
            templated:
              description: >-
                Whether the given href is a templated URL using
                [RFC\n6570](https://tools.ietf.org/html/rfc6570) format.
              default: false
        - type: array
          title: Array of Links
          items:
            $ref: '#/components/schemas/Link/oneOf/0'
    interaction.template:
      type: object
      description: >-
        An interaction machine object encapsulates a complete set of objects->
        that define an interaction  Triggers, Outcomes, Schema, and metadata.  
      properties:
        name:
          description: A human readable label for the intraction to be used in interfaces.
          type: string
          x-examples:
            - sigh-up
            - order-checkout
        class:
          description: >-
            Describes the nature of an intreaction content based on the current
            representation.
          type: array
          items:
            type: string
            x-examples:
              - screen-set
              - checkout-api
              - subscribtion-collection-form
              - lite-sign-up
        schema:
          $ref: '#/components/schemas/template.schema'
        outcomes:
          $ref: '#/components/schemas/template.outcomes'
        links:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
    basic-error:
      type: object
      required:
        - message
        - code
        - requestId
      properties:
        message:
          type: string
        callId:
          type: string
        code:
          type: integer
          minimum: 100
          maximum: 600
    fields.template.select:
      allOf:
        - $ref: '#/components/schemas/fields.template.basic'
        - properties:
            widget:
              enum:
                - select
            enum:
              type: array
              items:
                type: '#/properties/type'
      x-tags:
        - field-template
    channel: &ref_4
      allOf:
        - $ref: '#/components/schemas/fields.template.select'
        - properties:
            enum:
              type: array
              items:
                type: string
                enum:
                  - email
                  - sms
              default:
                - email
                - sms
    channel-sms: &ref_9
      title: if-channel-sms
      properties:
        properties:
          type: object
          properties:
            channel:
              properties:
                enum:
                  type: string
                  const:
                    - sms
    if-channel-sms: &ref_7
      properties:
        if:
          type: object
          $ref: '#/components/schemas/channel-sms'
        then:
          type: object
          $ref: '#/components/schemas/identity.mobile'
    channel-email: &ref_8
      title: if-channel-email
      properties:
        properties:
          type: object
          properties:
            channel:
              properties:
                enum:
                  const:
                    - email
    if-channel-email: &ref_6
      properties:
        if:
          type: object
          $ref: '#/components/schemas/channel-email'
        then:
          type: object
          $ref: '#/components/schemas/identity.email'
    $defs-selector: &ref_5
      properties:
        properties:
          type: object
          properties:
            channel:
              $ref: '#/components/schemas/channel'
        oneOf:
          type: array
          items:
            anyOf:
              - title: if-channel-sms
                $ref: '#/components/schemas/if-channel-sms'
              - title: if-channel-email
                $ref: '#/components/schemas/if-channel-email'
    fields.template.channel:
      $schema: 'https://json-schema.org/draft/2020-12/schema'
      type: object
      oneOf:
        - title: channel selector
          $ref: '#/components/schemas/$defs-selector'
        - title: only mobile
          $ref: '#/components/schemas/identity.mobile'
        - title: only email
          $ref: '#/components/schemas/identity.email'
      $defs:
        channel: *ref_4
        selector: *ref_5
        if-channel-email: *ref_6
        if-channel-sms: *ref_7
        channel-email: *ref_8
        channel-sms: *ref_9
  examples:
    signup-interaction-email-lite:
      summary: Lite email identity.
      value:
        properties:
          name: signup
          class: screen-set
          schema:
            properties:
              property1:
                type: string
              data.property2:
                type: string
              profile.lastName:
                type: string
            identity:
              properties:
                email:
                  type: string
                  format: email
              type: email
              provider: lite
          outcomes:
            authentication:
              output:
                type: auth
                identity: '#/properties/identity'
            authorized:
              output:
                type: projection
                identity: '#/properties/identity'
          links:
            - rel: self
              title: string
              type: application/json
              templated: true
              href: /templates/signup
            - rel: post
              class: form
              title: string
              type: application/json
              templated: true
              href: /signup
            - rel: lookup
              class: auth
              href: /auth/lookup/token
              templated: true
    signup-interaction-selector:
      summary: Represents a signup to a newsletter flow entry point.
      value:
        properties:
          name: signup
          class: screen-set
          schema:
            properties:
              property1:
                type: string
              channel:
                type: string
                enum: email sms
              data.property2:
                type: string
              profile.lastName:
                type: string
            required:
              - channel
            identity:
              $comment: should be changed to real json schema
              oneOf:
                - properties:
                    email:
                      type: string
                      format: email
                  type: email
                  provider: lite
                  selector:
                    channel: email
                - properties:
                    phonenumber:
                      type: string
                  type: phonenumber
                  provider: otp
                  selector:
                    channel: sms
          outcomes:
            authentication:
              output:
                type: authN
                identity: '#/properties/identity'
                callback: /bind
            authorized:
              output:
                type: projection
                identity: '#/properties/identity'
                profile: '#/properties/profile'
                subscriptions: '#/properties/subscriptions'
                consents: '#/properties/consents'
          links:
            - rel: self
              title: string
              type: application/json
              templated: true
              href: /templates/signup
            - rel: post
              title: string
              type: application/json
              templated: true
              href: /signup
  responses:
    errors.bad_request:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/basic-error'
    errors.forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/basic-error'
    errors.service_unavailable:
      description: Service unavailable
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/basic-error'
              - type: object
                properties:
                  code:
                    enum:
                      - 503
